#!/usr/bin/env node

const async = require('async');
const chalk = require('chalk');
const debug = require('debug')('symlink-meta-dependencies');
const fs = require('fs');
const fsExtra = require('fs.extra');
const getJson = require('../lib/getJson');
const getMetaDependencies = require('../lib/getMetaDependencies');
const getMetaFile = require('get-meta-file');
const path = require('path');
const program = require('commander');

if ( ! process.argv[2] || process.argv[2] === '--help')
  return console.log(`\n  usage:\n\n    symlink-meta-dependencies [child repository path] [--dry-run]\n`);

let childRepoPath = process.argv[2] === 'blank' ?
                      process.argv[3] :
                      process.argv[2];

childRepoPath = path.resolve(childRepoPath);

let dryRun = process.argv[3] === '--dry-run';

if (childRepoPath === '--dry-run') {
  childRepoPath = undefined;
  dryRun = true;
}

const meta = getMetaFile();
const recursiveSearch = (obj, results = []) => {
  const r = results;
  Object.keys(obj).forEach(key => {
    const value = obj[key];
    if (typeof value !== 'object') {
      r.push(key);
    } else if (typeof value === 'object') {
      recursiveSearch(value, r);
    }
  });
  return r;
};

const folders = (recursiveSearch(meta.projects).map((folder) => {
  return path.join(getMetaFile.getFileLocation(), '..', folder);
}));

folders.unshift(path.join(getMetaFile.getFileLocation(), '..'));

getMetaDependencies(folders, (err, graph) => {
  if (err) throw err;

  getJson(childRepoPath, (err, json) => {
    if (err) throw err;

    const childProjectName = json.data.name;
    const childGraph = graph[childProjectName];

    const numberOfDeps = childGraph.size;

    console.log(chalk.green(`${childProjectName} has ${numberOfDeps} dependencies to symlink`));

    async.forEachOf(childGraph.deps, (version, childProjectName, cb) => {

      let source = graph[childProjectName].path;
      let target = path.join(childRepoPath, 'node_modules', childProjectName)

      console.log(chalk.cyan(`creating symlink: ${target} -> ${source}`));

      fs.exists(target, (exists) => {

        if ( ! exists) return fs.symlink(source, target, 'dir', cb);

        return fsExtra.rmrf(target, (err) => {
          if (err) throw err;
          return fs.symlink(source, target, 'dir', cb);
        });

      });

    }, (err) => {
      if (err) throw err;

      console.log(chalk.green(`symlinked ${numberOfDeps} dependencies to ${childProjectName}`))

    });

  });

});